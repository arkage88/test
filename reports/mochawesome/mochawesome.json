{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-14T02:53:51.066Z",
    "end": "2021-09-14T02:53:53.003Z",
    "duration": 1937,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d40e97ff-3e76-4e16-9fde-a0c5ad1a2680",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "df579f03-e6f2-4ac4-bc1e-be498fb28d5b",
        "title": "OMDB Movie List",
        "fullFile": "E:\\Apitest\\api\\test\\movie-list-test.js",
        "file": "\\api\\test\\movie-list-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 562,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);\nconsole.log(response.body);",
            "err": {},
            "isRoot": false,
            "uuid": "9d3a64fe-ba61-4418-b39a-ea014111b7b1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I want to be able to get Detail OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get Detail OMDB Movie list",
            "timedOut": false,
            "duration": 475,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '', keyTitle);\nassert(response.status).to.equal(200);\nconsole.log(response.body);",
            "err": {},
            "isRoot": false,
            "uuid": "82c6ff45-fb99-46f4-a6ac-637f1333dae9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 458,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Incorrect IMDb ID.');\nconsole.log(response.body);",
            "err": {},
            "isRoot": false,
            "uuid": "a070f04f-01db-4d5f-86db-9ffbb6e0ae7e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 422,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "d101c72c-4ae9-4ca8-8ddc-603e64d035c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9d3a64fe-ba61-4418-b39a-ea014111b7b1",
          "82c6ff45-fb99-46f4-a6ac-637f1333dae9",
          "a070f04f-01db-4d5f-86db-9ffbb6e0ae7e",
          "d101c72c-4ae9-4ca8-8ddc-603e64d035c4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1917,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2021
}